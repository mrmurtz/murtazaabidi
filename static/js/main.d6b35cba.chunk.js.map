{"version":3,"sources":["images/arrow1.svg","images/arrow2.svg","images/murtaza.png","logo.svg","images/logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","arrow1","arrow2","href","murtaza","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,kBCA3CD,EAAOC,QAAU,IAA0B,qC,uECA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,oKCwD5BC,MAhDf,WACE,OACE,yBAAKC,UAAU,OACb,iCACE,yBAAKA,UAAU,kBACb,yBAAKC,IAAKC,IAAQF,UAAU,iBAC5B,yBAAKC,IAAKE,IAAQH,UAAU,iBAC5B,yBAAKC,IAAKC,IAAQF,UAAU,iBAC5B,yBAAKC,IAAKE,IAAQH,UAAU,iBAC5B,yBAAKC,IAAKC,IAAQF,UAAU,iBAC5B,yBAAKC,IAAKE,IAAQH,UAAU,iBAC5B,yBAAKA,UAAU,QACb,mCAAS,wCACT,4BAAK,iCAAL,IAAkC,uBAAGI,KAAK,2BAA2BJ,UAAU,aAA7C,gBAAlC,KAA8G,iEAA9G,IAAgL,uBAAGI,KAAK,kCAAkCJ,UAAU,aAApD,UAA2E,0DAA0D,uBAAGI,KAAK,kCAAkCJ,UAAU,aAApD,WAArT,QAIN,6BAASA,UAAU,mBACjB,yBAAKA,UAAU,SACb,yBAAKA,UAAU,eACb,wCACA,2BACG,mFADH,IACuF,uBAAGI,KAAK,4BAA4BJ,UAAU,cAA9C,kBADvF,IACsK,2GAEtK,6BACE,2BACG,kDADH,IACsD,uBAAGI,KAAK,6BAA6BJ,UAAU,cAA/C,mBADtD,IACuI,yBAGvI,6BACA,2BAAI,+BAAJ,IAAoC,uBAAGI,KAAK,sEAAsEJ,UAAU,cAAxF,qBACtC,6BACA,2BACG,sBADH,IAC0B,uBAAGI,KAAK,qCAAqCJ,UAAU,cAAvD,SAD1B,OAC2G,uBAAGI,KAAK,kCAAkCJ,UAAU,cAApD,gBAD3G,MAOA,yBAAKA,UAAU,SACb,yBAAKC,IAAKI,WCpCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d6b35cba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow1.14f994f9.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow2.cea680b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/murtaza.0553b4b3.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.461e79e6.svg\";","import React from 'react';\nimport logo1 from './logo.svg';\nimport logo from './images/logo.svg'\nimport arrow1 from './images/arrow1.svg'\nimport arrow2 from './images/arrow2.svg'\nimport murtaza from './images/murtaza.png'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section>\n        <div className=\"hero-container\">\n          <img src={arrow1} className=\"arrow arrow1\"></img>\n          <img src={arrow2} className=\"arrow arrow2\"></img>\n          <img src={arrow1} className=\"arrow arrow3\"></img>\n          <img src={arrow2} className=\"arrow arrow4\"></img>\n          <img src={arrow1} className=\"arrow arrow5\"></img>\n          <img src={arrow2} className=\"arrow arrow6\"></img>\n          <div className=\"hero\">\n            <h1>Hi, {\"I'm Murtaza üëãüèΩ\"}</h1>\n            <h2>{\"I‚Äôm a product designer at\"} <a href=\"https://transferwise.com\" className=\"highlight\">TransferWise</a>. {\"I design things to help solve problems for people. Sometimes I\"} <a href=\"https://medium.com/@murtz_abidi\" className=\"highlight\">write </a>{\"about things I care about. And I shout about things on \"}<a href=\"https://twitter.com/murtz_abidi\" className=\"highlight\">twitter</a>.</h2>\n          </div>\n        </div>\n      </section>\n      <section className=\"about-container\">\n        <div className=\"about\">\n          <div className=\"description\">\n            <h3>About me</h3>\n            <p>\n              {\"I've been designing things for the internet for almost 8 years. It started with \"} <a href=\"https://casseroleclub.com\" className=\"highlight2\">Casserole Club</a> {\"at FutureGov. Since then I've worked in agencies, corporates and startups learning a lot along the way.\"}\n            </p>\n            <br/>\n              <p>\n                {\"I'm passionate about representation and started\"} <a href=\"https://muslamicmakers.com\" className=\"highlight2\">Muslamic Makers</a> {\"to help my community.\"}\n              </p>\n\n              <br/>\n              <p>{\"Here's where you can find my\"} <a href=\"https://drive.google.com/drive/folders/0ByFB_YO-8JPINEM2MHJfbWpHVm8\" className=\"highlight2\">CV and Portfolio</a></p>\n            <br/>\n            <p>\n              {\"You can reach me by\"} <a href=\"mailto://murtaza.s.abidi@gmail.com\" className=\"highlight2\">email</a> or <a href=\"https://twitter.com/murtz_abidi\" className=\"highlight2\">@murtz_abidi</a>.\n            </p>\n\n\n\n            </div>\n            <div className=\"photo\">\n              <img src={murtaza}></img>\n            </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}